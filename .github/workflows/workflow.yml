name: CI CollectSFData

env:
  artifacts_path: bin\x64\artifacts
  release_path: bin\x64\release
  release_config: configurationFiles\collectsfdata.options.json
  project_name: CollectSFData
  github_owner: ${{ github.event.repository.owner.name }}

on:
  pull_request_target:
    types: [closed, opened]
    paths-ignore:
      - "docs/**"
      - "configurationFiles/**"
      - "KustoFunctions/**"
      - "KustoQueries/**"
      - "LogAnalyticsQueries/**"
    branches:
      - master
      - dllmain
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1

      - name: environment
        shell: cmd
        run: set

      - name: dotnet restore
        shell: cmd
        run: dotnet.exe restore %project_name%.csproj -v detailed

      - name: dotnet build / pack
        shell: cmd
        run: |
          set
          dotnet build %project_name%\%project_name%.csproj -v detailed -o %artifacts_path% -c Release
          dir

      - name: build output
        shell: cmd
        run: |
          set
          dir
          dir %release_path% /s

      - name: copy artifacts
        shell: cmd
        run: |
          set
          dir
          md %artifacts_path%
          copy %release_path%\*.config %artifacts_path%
          copy %release_path%\*.exe %artifacts_path%
          copy %release_path%\*.dll %artifacts_path%
          copy %release_config% %artifacts_path%

      - name: artifacts output
        shell: cmd
        run: dir %artifacts_path% /s

      - name: upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Release
          path: ${{ env.artifacts_path }}

  release:
    if: success() && github.event.pull_request.merged == true && github.event.action == 'closed' && (contains(github.event.pull_request.labels.*.name, 'Release') || contains(github.event.pull_request.labels.*.name, 'Pre-release'))
    needs: build
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1

      - name: environment
        shell: cmd
        run: set

      - name: download artifact
        uses: actions/download-artifact@v1
        with:
          name: Release
          path: ${{ env.release_path }}

      - name: release output
        shell: cmd
        run: dir %release_path% /s

      - name: prepare release asset
        shell: powershell
        id: prepare_release_asset
        run: |
          md "$($env:release_path)_upload"
          copy "$($env:release_path)\*.config" "$($env:release_path)_upload"
          copy "$($env:release_path)\*.exe" "$($env:release_path)_upload"
          copy "$($env:release_path)\*.dll" "$($env:release_path)_upload"
          copy "$($env:release_path)\*.json" "$($env:release_path)_upload"
          compress-archive -path "$($env:release_path)_upload\*" -destinationPath "$($env:release_path)\$($env:project_name).zip" -force
          $fileVersion = [io.fileinfo]::new("$($env:release_path)\$($env:project_name).exe").VersionInfo.FileVersion
          echo "::log-command parameter1=$fileVersion::fileVersion"
          echo "::set-output name=file_version::v$fileVersion"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.prepare_release_asset.outputs.file_version }}
          release_name: ${{ env.project_name }}
          draft: false
          prerelease: ${{ contains(github.event.pull_request.labels.*.name, 'Pre-release') }}

      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .\${{ env.release_path }}\${{ env.project_name }}.zip
          asset_name: ${{ env.project_name }}.zip
          asset_content_type: application/zip

      - name: upload nuget release asset
        id: upload-nuget-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.set_nuget_package.outputs.nuget_package }}
          asset_name: ${{ steps.set_nuget_package.outputs.nuget_package_name }}
          asset_content_type: application/zip

