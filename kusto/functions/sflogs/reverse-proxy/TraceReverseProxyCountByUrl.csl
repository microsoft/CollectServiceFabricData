.create-or-alter function with (docstring = "[T:string] where T=table name. function to count reverse proxy requests by url.", folder = "sflogs/reverse-proxy")
    TraceReverseProxyCountByUrl(T:string) {
        let extractPattern_requestId = @'([a-z0-9]{8}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{4}\-[a-z0-9]{12})';
        let extractPattern_ServiceUrls = @'((?:https?:\/\/[^,?]*))';
        let extractPattern_Verb = @'(verb\s=\s)([^,]*)';
        let extractPattern_Started = @'';
        let extractPattern_Finished = @'';
        let extractPattern_FwdToUrl = @'((?:https?:\/\/[^,?]*))';
        let extractPattern_AppServiceNames = @'19081\/([^\/]*)\/([^\/]*)';
        let extractPattern_ControllerMethodNames = @'api\/([^\/]*)\/([^\/]*)';        
        table(T)
        | where Type contains "ReverseProxy"
        | where Text !contains "status code"
        | extend requestId = extract(extractPattern_requestId, 1, Text, typeof(string))
        | extend serviceUrls = extract_all(extractPattern_ServiceUrls, Text)        
        | extend serviceUrl = tostring(array_slice(serviceUrls, 0, 0)[0])
        | extend verb = extract(extractPattern_Verb, 2, Text, typeof(string))
        | project Timestamp , TID , PID , Level , Type , Text , NodeName , FileType, requestId, serviceUrl, verb
        | order by tostring(serviceUrl)
        | summarize count() by tostring(serviceUrl)
        | order by count_
    }
