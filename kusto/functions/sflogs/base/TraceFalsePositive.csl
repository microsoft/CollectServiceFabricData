// sflogs extend 'FalsePositive' false positive query of Type and/or Text or Any
.create-or-alter function with (docstring = '[T:string] where T=table name. function to create FalsePositives column by searching service fabric sflogs for false warning / error traces', folder = 'sflogs/base')
    TraceFalsePositive (T:string) {
        // search Type And Text column using string contains
        let TypeAndTextContains = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, typeQuery:string, textQuery:string) {
            tableName
            | extend isFalsePositive = iif((Type contains typeQuery and Text contains textQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type contains: ', typeQuery, ' ::text contains: ', textQuery ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type And Text column using regex sensitive match
        let TypeAndTextMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, typeQuery:string, textQuery:string) {
            tableName
            | extend isFalsePositive = iif((Type matches regex typeQuery and Text matches regex textQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type matches: ', typeQuery, ' ::text matches: ', textQuery ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type And Text column using regex insensitive match
        let TypeAndTextIMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string),issue:string, typeQuery:string, textQuery:string) {
            let itypeQuery = strcat('(?i:',typeQuery,')'); // re2 case insensitive
            let itextQuery = strcat('(?i:',textQuery,')'); // re2 case insensitive
            tableName
            | extend isFalsePositive = iif((Type matches regex itypeQuery and Text matches regex itextQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type matches: ', typeQuery, ' ::text matches: ', textQuery ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Text column using string contains
        let TextContains = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Text contains query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::text contains: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Text column using regex sensitive match
        let TextMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Text matches regex query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::text matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Text column using regex insensitive match
        let TextIMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            let iQuery = strcat('(?i:',query,')'); // re2 case insensitive
            tableName
            | extend isFalsePositive = iif((Text matches regex iQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::text matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type column using string contains
        let TypeContains = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Type contains query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type contains: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type column using regex sensitive match
        let TypeMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Type matches regex query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type column using regex insensitive match
        let TypeIMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            let iQuery = strcat('(?i:',query,')'); // re2 case insensitive
            tableName
            | extend isFalsePositive = iif((Type matches regex iQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type or Text columns using string contains
        let TypeOrTextContains = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Type contains query or Text contains query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type or text contains: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type or Text columns using regex sensitive match
        let TypeOrTextMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            tableName
            | extend isFalsePositive = iif((Type matches regex query or Text matches regex query),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type or text matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        // search Type or Text columns using regex insensitive match
        let TypeOrTextIMatches = (tableName:(Type:string,Text:string,FalsePositive:bool,Reason:string), issue:string, query:string) {
            let iQuery = strcat('(?i:',query,')'); // re2 case insensitive
            tableName
            | extend isFalsePositive = iif((Type matches regex iQuery or Text matches regex iQuery),true,false)
            | extend Reason = iif(isFalsePositive, strcat(issue,' ::type or text matches: ', query ), Reason)
            | extend FalsePositive = isFalsePositive or FalsePositive
            | project-away isFalsePositive
        };
        table(T)
            | extend FalsePositive = false
            | extend Reason = ""
        // add false positive signatures here using one of the provided functions in format issue description, string pattern, string pattern
        // use *Matches (regex) only when needed as it is remarkably slower
            | invoke TextContains("normal ctrl-c process exit", "terminated with exit code 3221225786")
            | invoke TypeAndTextIMatches("normal application / process exit by service fabric abort", "Hosting", "exitcode\\s?=?\\s?7148")
            | invoke TypeAndTextIMatches("normal application / process exit by service fabric deactivate", "Hosting", "ExitCode\\s?=?\\s?7147")
            | invoke TextContains("normal connection close", "FABRIC_E_CONNECTION_CLOSED_BY_REMOTE_END")
            | invoke TextContains("normal cert resolving trace", "Create(FindBySubjectName, 'AzureServiceFabric-AnonymousClient'): tried as subject name: FABRIC_E_INVALID_SUBJECT_NAME, Will try as CommonName...")
            | invoke TextContains("chaos test traces", "chaos")
            | invoke TypeAndTextContains("normal cert check trace", "Common.SecurityUtility", "failed to get the certificate's private key")
            | invoke TypeAndTextContains("normal cert check trace", "Common.CryptoUtility", "CryptAcquireCertificatePrivateKey failed. Error:0x80090014")
            | invoke TypeAndTextContains("normal cert check trace", "Common.CryptoUtility", "All tries to get private key filename failed")
            | invoke TypeAndTextContains("not an error", "HttpGateway.HttpClaimsAuthHandler" , "Authorization header not found")
            | invoke TypeAndTextContains("not an error", "NamingGateway.FabricGatewayManager", "Failed to retrieve thumbprint for httpgateway server certificate: CredentialAlreadyLoaded")
    }

